package javasudoku.view;
import java.util.ArrayList;
import javasudoku.model.SudokuCoordinate;

/**
 * A custom JPanel that displays a 3x3 arrangement of CellPanels
 * @author Ishaiah Cross
 */
public class SubgridPanel extends javax.swing.JPanel {
    private SudokuCoordinate coordinate;
    final ArrayList<CellPanel> cells;
    /**
     * Creates new form GUISudokuSubgrid
     */
    public SubgridPanel() {
        cells = new ArrayList<>();
        initComponents();
        addCells();
    }
    
    /**
     * Adds the automatically generated variables to the cells arraylist
     */
    private void addCells() {
        getCells().add(gUISudokuCell1);
        getCells().add(gUISudokuCell2);
        getCells().add(gUISudokuCell3);
        getCells().add(gUISudokuCell4);
        getCells().add(gUISudokuCell5);
        getCells().add(gUISudokuCell6);
        getCells().add(gUISudokuCell7);
        getCells().add(gUISudokuCell8);
        getCells().add(gUISudokuCell9);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gUISudokuCell1 = new javasudoku.view.CellPanel();
        gUISudokuCell2 = new javasudoku.view.CellPanel();
        gUISudokuCell3 = new javasudoku.view.CellPanel();
        gUISudokuCell4 = new javasudoku.view.CellPanel();
        gUISudokuCell5 = new javasudoku.view.CellPanel();
        gUISudokuCell7 = new javasudoku.view.CellPanel();
        gUISudokuCell9 = new javasudoku.view.CellPanel();
        gUISudokuCell8 = new javasudoku.view.CellPanel();
        gUISudokuCell6 = new javasudoku.view.CellPanel();

        setBackground(new java.awt.Color(153, 153, 153));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        setForeground(new java.awt.Color(63, 63, 63));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gUISudokuCell1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gUISudokuCell2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gUISudokuCell3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gUISudokuCell4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gUISudokuCell5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gUISudokuCell6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gUISudokuCell7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gUISudokuCell8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gUISudokuCell9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(gUISudokuCell3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gUISudokuCell2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gUISudokuCell1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gUISudokuCell4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gUISudokuCell5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gUISudokuCell6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gUISudokuCell7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gUISudokuCell8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gUISudokuCell9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javasudoku.view.CellPanel gUISudokuCell1;
    private javasudoku.view.CellPanel gUISudokuCell2;
    private javasudoku.view.CellPanel gUISudokuCell3;
    private javasudoku.view.CellPanel gUISudokuCell4;
    private javasudoku.view.CellPanel gUISudokuCell5;
    private javasudoku.view.CellPanel gUISudokuCell6;
    private javasudoku.view.CellPanel gUISudokuCell7;
    private javasudoku.view.CellPanel gUISudokuCell8;
    private javasudoku.view.CellPanel gUISudokuCell9;
    // End of variables declaration//GEN-END:variables
    
    /**
     * @return the coordinate
     */
    public SudokuCoordinate getCoordinate() {
        return coordinate;
    }

    /**
     * @param coordinate the coordinate to set
     */
    public void setCoordinate(SudokuCoordinate coordinate) {
        this.coordinate = coordinate;
    }
    
    /**
     * Assigns global cell coordinates to the child cells using the global coordinate
     * of the subgrid
     */
    public void assignCellCoordinates() {
        for(int i = 0; i < getCells().size(); i++) {
            int cellX = 3 * coordinate.getX() + (i % 3);
            int cellY = 3 * coordinate.getY() + (i / 3);
    
            SudokuCoordinate assignedCoordinate = new SudokuCoordinate(cellX, cellY);
            CellPanel targetPanel = getCells().get(i);
            
            //Set the cell's coordinate
            targetPanel.setCoordinate(assignedCoordinate);
        }
    }
    
    /**
     * Sets the display value of the CellPanel object at the given coordinate within the subgrid,
     * where [0, 0] is the top-left cell and [2, 2] is the bottom-right cell
     * @param x The x-coordinate of the cell
     * @param y The y-coordinate of the cell
     * @param value The value to set for the cell
     */
    public void setCellValue(int x, int y, int value) {
        //Convert the x, y coordinate pair into an arraylist index
        int cellIndex = y * 3 + x;
        try {
        //Set the value
        CellPanel cell = getCells().get(cellIndex);
        cell.setValue(value);
       } catch(IndexOutOfBoundsException e) {
            System.out.println("Out of bounds subgrid coordinate: " + cellIndex);
            System.out.println("x: " + x + ", y: " + y);
        }
    }

    /**
     * @return the cells
     */
    public ArrayList<CellPanel> getCells() {
        return cells;
    }
    
     /* Sets whether or not the text fields within the subgrid can be edited
     * @param active Whether or not the text fields can be edited (true for editable, false for not)
     */
    public void setActive(boolean active) {
        for(CellPanel cell: cells)
            cell.setActive(active);
    }
    
    /**
     * Resets the text colour for all of the cells in the subgrid to clear
     * invalid placements
     */
    void setValid() {
        for(CellPanel cell: cells)
            cell.setValid(true);
    }
}
