package javasudoku.view;
import java.util.ArrayList;
import javasudoku.model.SudokuCoordinate;

/**
 * A custom JPanel that displays a 3x3 arrangement of SubgridPanels
 * @author Ishaiah Cross
 */
public class BoardPanel extends javax.swing.JPanel {
    final ArrayList<SubgridPanel> subgrids;
    /**
     * Creates new form GUISudokuBoard
     */
    public BoardPanel() {
        subgrids = new ArrayList<>();
        initComponents();
        addSubgrids();
        assignCellCoordinates();
    }
    
    /**
     * Add the automatically generated subgrid variables to the arraylist
     */
    private void addSubgrids() {
        getSubgrids().add(gUISudokuSubgrid1);
        getSubgrids().add(gUISudokuSubgrid2);
        getSubgrids().add(gUISudokuSubgrid3);
        getSubgrids().add(gUISudokuSubgrid4);
        getSubgrids().add(gUISudokuSubgrid5);
        getSubgrids().add(gUISudokuSubgrid6);
        getSubgrids().add(gUISudokuSubgrid7);
        getSubgrids().add(gUISudokuSubgrid8);
        getSubgrids().add(gUISudokuSubgrid9);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gUISudokuSubgrid1 = new javasudoku.view.SubgridPanel();
        gUISudokuSubgrid2 = new javasudoku.view.SubgridPanel();
        gUISudokuSubgrid3 = new javasudoku.view.SubgridPanel();
        gUISudokuSubgrid4 = new javasudoku.view.SubgridPanel();
        gUISudokuSubgrid5 = new javasudoku.view.SubgridPanel();
        gUISudokuSubgrid6 = new javasudoku.view.SubgridPanel();
        gUISudokuSubgrid7 = new javasudoku.view.SubgridPanel();
        gUISudokuSubgrid8 = new javasudoku.view.SubgridPanel();
        gUISudokuSubgrid9 = new javasudoku.view.SubgridPanel();

        setBackground(new java.awt.Color(204, 204, 204));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        setForeground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gUISudokuSubgrid1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gUISudokuSubgrid2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gUISudokuSubgrid3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gUISudokuSubgrid4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gUISudokuSubgrid5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gUISudokuSubgrid6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gUISudokuSubgrid7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gUISudokuSubgrid8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gUISudokuSubgrid9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gUISudokuSubgrid3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gUISudokuSubgrid2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gUISudokuSubgrid1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gUISudokuSubgrid4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gUISudokuSubgrid5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gUISudokuSubgrid6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gUISudokuSubgrid7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gUISudokuSubgrid8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gUISudokuSubgrid9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javasudoku.view.SubgridPanel gUISudokuSubgrid1;
    private javasudoku.view.SubgridPanel gUISudokuSubgrid2;
    private javasudoku.view.SubgridPanel gUISudokuSubgrid3;
    private javasudoku.view.SubgridPanel gUISudokuSubgrid4;
    private javasudoku.view.SubgridPanel gUISudokuSubgrid5;
    private javasudoku.view.SubgridPanel gUISudokuSubgrid6;
    private javasudoku.view.SubgridPanel gUISudokuSubgrid7;
    private javasudoku.view.SubgridPanel gUISudokuSubgrid8;
    private javasudoku.view.SubgridPanel gUISudokuSubgrid9;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Assigns a global x, y coordinate pair to each of the cells contained in the subgrids
     */
    private void assignCellCoordinates() {
        for(int i = 0; i < getSubgrids().size(); i++) {
            int subgridX = (i % 3);
            int subgridY = (i / 3);
   
            SudokuCoordinate assignedCoordinate = new SudokuCoordinate(subgridX, subgridY);
            SubgridPanel targetSubgrid = getSubgrids().get(i);
            
            //Update the subgrid coordinate
            targetSubgrid.setCoordinate(assignedCoordinate); 
            //Update the subgrid cells' coordinates
            targetSubgrid.assignCellCoordinates();
        }
    }
    
    /**
     * Sets the display value of the CellPanel object at the given coordinate,
     * where [0, 0] is the top-left cell and [8, 8] is the bottom-right cell
     * @param x The x-coordinate of the cell
     * @param y The y-coordinate of the cell
     * @param value The value to set for the cell
     */
    public void setCellValue(int x, int y, int value) {
        //Convert the x, y coordinate pair into a continuous value along the subgrids array
        //X and Y are divided by 3 to get the index of the subgrid containing the coordinate only
        int subgridIndex = 0;
        
        try {
            subgridIndex = (y / 3) * 3 + (x / 3);
            SubgridPanel targetSubgrid = getSubgrids().get(subgridIndex); //Get the subgrid containing the coordinate

            //Calculate the coordinate of the cell local to the subgrid and set the value
            int localX = x % 3;
            int localY = y % 3;
            targetSubgrid.setCellValue(localX, localY, value);
        } catch(IndexOutOfBoundsException e) {
            System.out.println("Out of bounds board coordinate: " + subgridIndex);
            System.out.println("x: " + x + ", y: " + y);
        }
    }

    /**
     * @return the subgrids
     */
    public ArrayList<SubgridPanel> getSubgrids() {
        return subgrids;
    }
    
    /**
     * Sets whether or not the text fields within the board can be edited
     * @param active Whether or not the text fields can be edited (true for editable, false for not)
     */
    public void setActive(boolean active) {
        for(SubgridPanel subgrid: subgrids)
            subgrid.setActive(active);
    }
}
